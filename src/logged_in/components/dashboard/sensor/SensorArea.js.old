import { Button, Grid } from '@material-ui/core';
import { AcUnit, Autorenew, BrightnessHigh, Opacity } from '@material-ui/icons';
import React, { useEffect } from 'react'
import SensorCard from './SensorCard';

import Amplify, { Auth, PubSub } from 'aws-amplify';
import { AWSIoTProvider } from '@aws-amplify/pubsub/lib/Providers';
import AWSIoTConfig from './AWSIoTConfig';
import AWS from 'aws-sdk';

// Apply plugin with configuration
Amplify.addPluggable(new AWSIoTProvider({
    aws_pubsub_region: 'ap-southeast-1',
    aws_pubsub_endpoint: 'wss://a25ivprp9v2irh-ats.iot.ap-southeast-1.amazonaws.com/mqtt',
}));


function SensorArea() {
    useEffect(() => {
        const REGION = AWSIoTConfig.iot_region;
        const policyName = AWSIoTConfig.iot_policy;

        Auth.currentCredentials().then(credentials => {
            const iot = new AWS.Iot({
                region: REGION,
                credentials: Auth.essentialCredentials(credentials)
            });
            const target = credentials.identityId;
            iot.listAttachedPolicies({ target }, (err, data) => {
                if (err) console.log(err, err.stack);
                if (!data.policies.find(policy => policy.policyName === policyName)) {
                    iot.attachPolicy({ policyName, target }, (err, data) => {
                        if (err) console.log(`Error attaching IoT policy ${policyName} to Cognito identity ${target}: ${err}`, err.stack);
                        else console.log(`Attached IoT policy ${policyName} to identity ${target}.`);
                    });
                }
            });
        });
    }, []);




    var sensors = [
        {
            id: "temp",
            label: "Temperature",
            icon: (<AcUnit />),
            value: "21",
            unit: "Â°C"
        },
        {
            id: "hum",
            label: "Humidity",
            icon: (<Opacity />),
            value: "90",
            unit: "%"
        },
        {
            id: "luminance",
            label: "Luminance",
            icon: (<BrightnessHigh />),
            value: "400",
            unit: "lux"
        },
        {
            id: "flow",
            label: "Flow Sensor",
            icon: (<Autorenew />),
            value: "10",
            unit: "mL/s"
        },
        {
            id: "soilmoist",
            label: "Soil Moisture",
            icon: (<Opacity />),
            value: "60",
            unit: "%"
        }
    ];
    return (
        <Grid container spacing={3}>
            {sensors.map((sensor) => (
                <Grid key={sensor.id} item xs={6} md={3}>
                    <SensorCard sensor={sensor} />
                </Grid>
            ))}
        </Grid>
    )
}

export default SensorArea;
